/*

Given a string S, find the longest palindromic substring in S.

Substring of string S:

S[i...j] where 0 <= i <= j < len(S)

Palindrome string:

A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S.

Incase of conflict, return the substring which occurs first ( with the least starting index ).

Example :

Input : "aaaabaaa"
Output : "aaabaaa"

*/

Solution:

string Solution::longestPalindrome(string s){
    
    int len = s.length();
    if(len <= 1){
        return s;
    }
    /*int st = 0;
    int maxm = 1;
    int low, high;
    for(int i = 0; i<len; i++){
        // for the even
        low = i-1;
        high = i;
        while(low>=0 && high<len && s[high] == s[low]){
            if(high-low+1 > maxm){
                st = low;
                maxm = high -low+1;
            }
            low--;
            high++;
        }
        // for the odd
        low = i-1;
        high = i+1;
        while(low>=0 && high<len && s[low] == s[high]){
            if(high-low+1>maxm){
                st = low;
                maxm = high -low+1;
            }
            low--;
            high++;
        }
    }
    string d = s.substr(st, maxm);
    return d;*/
    bool t[len][len];
    for(int i = 0; i<len; i++){
        for(int l = 0; l<len; l++){
            t[i][l] = false;
        }
    }
    for(int i = 0; i<len; i++){
        t[i][i] = true;
    }
    int st = 0;
    int maxm = 1;
    int j;
    int flag = 0;
    for(int i = 0; i<len-1; i++){
        j = i+1;
        if(s[i] == s[j]){
            t[i][j] = true;
            maxm = 2;
            if(flag == 0){
                st = i;
                flag = 1;
            }
        }
    }
    for(int k = 3; k<=len; k++){
        for(int i = 0; i<len-k+1; i++){
            j = i+k-1;
            if(s[i] == s[j] && t[i+1][j-1] == true){
                t[i][j] = true;
                if(maxm < k){
                    maxm = k;
                    st = i;
                }
            }
        }
    }
    string d = s.substr(st, maxm);
    return d;
}
