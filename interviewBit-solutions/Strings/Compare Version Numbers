/*

Compare two version numbers version1 and version2.

If version1 > version2 return 1,
If version1 < version2 return -1,
otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level 
revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 1.13 < 1.13.4

*/

Solution:

int Solution::compareVersion(string s1, string s2){
    
    vector<string>a, b;
    string t;
    int i = 0;
    int s1l = s1.length();
    int s2l = s2.length();
    while(i<s1l){
        t = "";
        while(s1[i] != '.' && i<s1l && s1[i] != ' ' && s1[i] == '0'){
            i++;
        }
        while(s1[i] != '.' && i<s1l && s1[i] != ' '){
             t = t+s1[i];
             i++;
        }
        i++;
        if(t.length() != 0){
            a.push_back(t);
        }
    }
    i = 0;
    while(i<s2l){
        t = "";
        while(s2[i] != '.' && i<s2l && s2[i] != ' ' && s2[i] == '0'){
            i++;
        }
        while(s2[i] != '.' && i<s2l && s2[i] != ' '){
             t = t+s2[i];
             i++;
        }
        i++;
        if(t.length() != 0){
            b.push_back(t);
        }
    }
    int j = min(a.size(), b.size());
    for(int i = 0; i<j; i++){
        string u = a[i];
        string v = b[i];
        if(u.size() > v.size()){
            return 1;
        }
        else if(u.size() < v.size()){
            return -1;
        }
        else{
            int k = 0;
            while(u[k] != '\0'){
                if((int)u[k] > (int)v[k]){
                    return 1;
                }
                else if((int)u[k] < (int)v[k]){
                    return -1;
                }
                k++;
            }
        }
    }
    if(a.size() > b.size()){
        return 1;
    }
    else if(a.size() < b.size()){
        return -1;
    }
    return 0;
}
