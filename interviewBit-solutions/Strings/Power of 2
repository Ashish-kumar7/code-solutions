/*

Find if Given number is power of 2 or not. 
More specifically, find if given number can be expressed as 2^k where k >= 1.

Input:

number length can be more than 64, which mean number can be greater than 2 ^ 64 (out of long long range)
Output:

return 1 if the number is a power of 2 else return 0

Example:

Input : 128
Output : 1

*/

Solution:

/*string multiplybytwo(string temp){
    string ans = "";
    int x, y, carry = 0;
    for(int i = temp.length()-1; i>=0; i--){
        x = ((int)temp[i] - 48)*2;
        y = (x + carry)%10;
        carry = x/10;
        ans = to_string(y) + ans;
    }
    if(carry > 0){
        ans = to_string(carry) + ans;
    }
    return ans;
}

bool comp(string num, string temp){
    if(num.length() == temp.length()){
        if(num>temp){
            return true;
        }
    }
    else if(num.length() > temp.length()){
        return true;
    }
    return false;
}
*/
int Solution::power(string A){
    
    long long  k = 0;
    int i=0;
    int len = A.size();
    while(i<len){
        k = k*10+(A[i]-'0');
        i++;
    }
    if(k == 1)
        return 0;
        
    long long p = k-1;
    if((k & p) == 0)
        return 1;
    else
        return 0;
        
    /*int len = s.length();
    if(len == 1 && s[0] == '1'){
        return 0;
    }
	int i = 0;
	while(s[i] == '0'){
	    i++;
	}
	if(i == len){
	    return 0; 
	}
	string num = "";
	while(i<len){
	    num = num+s[i];
	    i++;
	}
	string temp = "2";
	while(comp(num, temp) == true){
	    temp = multiplybytwo(temp);
	}
	if(temp == num){
	    return 1;
	}
	else{
	    return 0;
	}*/
}
